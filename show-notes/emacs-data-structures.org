#+title: Emacs Data Structures


* resources
- [[https://www.youtube.com/watch?v=HyFbIWvmV0A][john kitchin - scimax - data structures in emacs-lisp]]

* Data Structures

** string

#+begin_src emacs-lisp

(setq S "123")
(substring S 1)
(substring S 1 2)

#+end_src

** list

#+begin_src emacs-lisp

'(a b c)

(setq L '(1 2 3))

(car L)
(cl-first L)
(cl-second L)

(nth 0 L)
(nth 1 L)
(elt L 1)


(con L)

#+end_src


#+begin_src emacs-lisp
(cl-second L)
#+end_src


#+begin_src emacs-lisp

(car L)
(cdr L)

(last L) ;; a bit confusing as it returns last element as a list. use car to get it out
(car (last L))

(butlast L)

#+end_src



#+begin_src emacs-lisp

(setq L '(1 2 (+ 1 2)))

(setq L (list 1 2 (+ 1 2)))

# or use back quote
(setq L `(1 2 (+ 1 2)))

#+end_src




** vectors

#+begin_src emacs-lisp

(setq v [1 2 3])
(setq v [1 2 (+ 1 2)])

(setq v (vector 1 2 (+ 1 2)))

(elt v 1)

(aref v 1)

#+end_src


** a-list

associative list
#+begin_src emacs-lisp

(setq A '( (a . 1) (b . 2) (c . 3) ))

(cdr (assoc 'a A))
(cdr (assoc 'b A))

(car (rassoc 2 A))

;; not really a dictionary
(setq A '( (a . 1) (b . 2) (c . 3) (c . 4) ))
(cdr (assoc 'c A))

(setq A '( (a . 1) (b . 2) (c . 3) (d . 2) ))
(car (rassoc 2 A))
#+end_src
** p-list

#+begin_src emacs-lisp
(setq P '(:a 1 :b 2 :c 3))
P

(plist-get P :b)

;; not really a dictionary
(setq P '(:a 1 :b 2 :c 3 :c 4))
(plist-get P :c)

#+end_src

** hash table

#+begin_src emacs-lisp
(setq h #s(hash-table data (a 1 b 2 c 3)))
(gethash 'c h)

(setq h #s(hash-table data (a 1 b 2 c 3 c 4)))
(gethash 'c h)

#+end_src
